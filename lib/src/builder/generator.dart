import 'dart:async';

import 'package:analyzer/analyzer.dart';
import 'package:build/build.dart';

import 'package:over_react/src/builder/generation/declaration_parsing.dart';
import 'package:over_react/src/builder/generation/impl_generation.dart';
import 'package:source_gen/source_gen.dart';
import 'package:source_span/source_span.dart';

import './util.dart';

class OverReactGenerator extends Generator {
  String _generateForFile(AssetId inputId, String primaryInputContents, CompilationUnit resolvedUnit) {
    void _logNoDeclarations() {
      log.fine(
          'There were no declarations found for file: ${inputId
              .toString()}');
    }

    var sourceFile = new SourceFile.fromString(
        primaryInputContents, url: idToPackageUri(inputId));

    ImplGenerator generator;
    if (ParsedDeclarations.mightContainDeclarations(primaryInputContents)) {
      var declarations = new ParsedDeclarations(resolvedUnit, sourceFile, log);

      if (declarations.hasErrors) {
        log.severe(
            'There was an error parsing the file declarations for file: ${inputId.toString()}');
        return '';
      }

      // TODO: Do we need this case anymore? I honestly can't remember why I put it here
//      if (!declarations.hasDeclarations) {
//        _logNoDeclarations();
//        return '';
//      }
      generator = new ImplGenerator(log, sourceFile)..generate(declarations);
    } else {
      _logNoDeclarations();
    }
    return generator?.outputContentsBuffer?.toString() ?? '';
  }

  @override
  Future<String> generate(LibraryReader library, BuildStep buildStep) async {
    // Don't build on non-library files
    if (!await buildStep.resolver.isLibrary(buildStep.inputId)) {
      return '';
    }

    final inputId = await buildStep.inputId;
    final entryLib = await buildStep.inputLibrary;

    // Get list of compilation units for each part in this library
    final compUnits = [
      [entryLib.definingCompilationUnit],
      entryLib.parts.expand((p) => [p]),
    ].expand((t) => t).toList();

    var contentBuffer = new StringBuffer();
    for (final unit in compUnits) {
      log.fine('Generating implementations for file: ${unit.name}');
      // unit.uri is null for the base library file
      final assetId = AssetId.resolve(unit.uri ?? unit.name, from: inputId);

      // Only generate on part files which were not generated by this builder and
      // which can be read.
      if (!assetId.toString().contains(outputExtension) && await buildStep.canRead(assetId)) {
        final resolvedUnit = unit.computeNode();
        final inputContents = await buildStep.readAsString(assetId);
        contentBuffer.write(_generateForFile(assetId, inputContents, resolvedUnit));
      }
    }

    if (contentBuffer.isNotEmpty) {
      return contentBuffer.toString();
    } else {
      log.fine('No output generated for file: ${inputId.toString()}');
    }
    return '';
  }
}

