@TestOn('vm')
@Timeout(const Duration(minutes: 1))
library over_react.strong_mode;

import 'dart:async';
import 'dart:io';

import 'package:dart_dev/util.dart' show copyDirectory;
import 'package:test/test.dart';

const String strongModeProject = 'test_fixtures/strong_mode';
const String strongModeDart2Project = 'test_fixtures/strong_mode_dart2';

/// Runs the dart analzyer task for the given project.
Future<ProcessResult> analyzeProject(String projectPath) async {
  // Won't work unless all files are listed, for some reason.
  var files = <String>[]
    ..addAll(new Directory(projectPath).listSync()
        .where((e) => FileSystemEntity.isFileSync(e.path) && e.path.endsWith('.dart'))
        .map((e) => e.path)
    );

  var args = ['--strong']
    ..addAll(files);

  return await Process.run('dartanalyzer', args);
}

// Returns the path to a new temporary copy of the [project] fixture
// testing purposes, necessary since formatter may make changes to ill-formatted files.
String copyProject(String project) {
  final String testProject = '${project}_temp';

  final Directory temp = new Directory(testProject);
  copyDirectory(new Directory(project), temp);
  addTearDown(() {
    // Clean up the temporary test project created for this test case.
    temp.deleteSync(recursive: true);
  });

  return testProject;
}

String getPubspec() {
  var lines = <String>[
    '# Generated by strong_mode_test.dart',
    'name: test_fixture',
    'version: 0.0.0',
    'dependencies:',
    ' over_react:',
    '   path: ../..'
  ];

  return lines.join('\n');
}

main() {
  group('OverReact strong mode compliance:', () {
    test('generates strong mode compliant code', () async {
      var testProject = copyProject(strongModeProject);

      new File('$testProject/pubspec.yaml').writeAsStringSync(getPubspec());

      expect(await Process.run('pub', ['get'], workingDirectory: testProject), succeeded);
      expect(await Process.run('pub', ['build', '--mode="debug"'], workingDirectory: testProject), succeeded);

      expect(await analyzeProject('$testProject/build/web'), succeeded);
    });

    test('generates strong mode compliant code with dart2-compatible boilerplate', () async {
      var testProject = copyProject(strongModeDart2Project);

      new File('$testProject/pubspec.yaml').writeAsStringSync(getPubspec());

      expect(await Process.run('pub', ['get'], workingDirectory: testProject), succeeded);
      expect(await Process.run('pub', ['build', '--mode="debug"'], workingDirectory: testProject), succeeded);

      expect(await analyzeProject('$testProject/build/web'), succeeded);
    });
  });
}

class _ProcessSucceededMatcher extends Matcher {
  const _ProcessSucceededMatcher();

  @override
  Description describe(Description description) =>
      description.add('a ProcessResult that completed successfully');

  @override
  bool matches(covariant ProcessResult item, _) =>
      item.exitCode == 0;

  @override
  Description describeMismatch(covariant ProcessResult item, Description mismatchDescription, _, __) =>
      mismatchDescription.add('has exit code ${item.exitCode} and output ${{
        'stdout': item.stdout.toString(),
        'stderr': item.stderr.toString(),
      }}');
}

const _ProcessSucceededMatcher succeeded = const _ProcessSucceededMatcher();
